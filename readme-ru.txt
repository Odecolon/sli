sli v0.1 - simple L interpreter by Odecolon

1. О программе

sli - интерпретатор простого скриптового языка L, созданного мной для встраивания в другие мои проекты. Поэтому интерпретатор помещён в отдельный модуль, написанный на FP, а sli - это маленькая консоль вокруг его (как ни странно, написана тоже на FP).

Сам язык описан в третьем разделе этого readme. Кроме того, в папке examples этого репозитория лежат примеры скриптов. 

2. Запуск и возможности

Чтобы выполнить скрипт из файла:

sli файл_скрипта файл_лога(опционально)

В консоли можно попробовать использовать какие-нибудь команды языка - например, присвоить значение переменной. Для выхода используется команда 'exit'.

Собиралось и тестировалось в lazarus v1.8.0 c fpc 3.0.4 win32 под Win7.

3. О языке L 

L - скриптовый язык, предназначенный для встраивания куда-нибудь. Простой, примитивный, громоздкий и неочевидный. Процедурный, но не функциональный. Имееет только целочисленные переменные. Больше того, в нём и локальных-то переменных нет!

Примечание - если вы совершили ошибку или не использовали приведённые рекомендации, то интерпретатор может или вообще вылететь, или выдать совершенно непредсказуемый результат - v0.1 всё таки.

1) Алфавит.

Латинский алфавит A-Z, a-z и ", =, >, <, +, -, /, *, $, %

В названиях переменных и процедур можно использовать только буквы латинского алфавита. Язык регистронезависим.

2) Ключевые слова.

def, proc, var, end, if, loop, break, continue, outln, out, getln, get 

3) Операторы и выражения

Все выражения, состоящие из более чем одного слова, заключаются в кавычки, например: "Hello, world!".

Операторы препроцессора обрабатывают выражения перед исполнением инструкций:

Оператор $ получает значение переменной: $имя_переменной

Оператор % вычисляет выражение: "%2 + 2" преобразуется в "4" 

Логично, что если нужно обработать выражение с переменными, к ним нужно применить $: например, если foo равна 2, то "%2 * $foo" преобразуется в "4". 

Кроме того, в выражениях с % необходимо ставить пробелы между знаками, числами и переменными.

Ну и на строки % применять не стоит, да.

Операторы +, -, /, * делают именно то, что вы подумали, внутри выражений в кавычках с оператором %.

В инструкции if применяются =, <, >, <=, >=, != с также очевидным значением.

4) Синтаксис.

4-1) Переменные.

Все переменные глобальные и хранятся в памяти как строки, так что технически значения могут быть любыми, однако для вычислений доступна только целочисленная арифметика.

Объявляются так:

def var имя_переменной
def var имя_переменной = значение

Рекомендую присваивать значения сразу при объявлении, а то мало ли.

Присвоить значение можно и так:

имя_переменной = выражение

Количество переменных ограничено, поэтому их можно удалять:

del имя_переменной

4-2) Процедуры.

Объявляются так:

def proc имя_процедуры

тело_процедуры

end def

Вызываются так:

do имя_процедуры

Возврат осуществляется либо по достижению конца процедуры, либо с помощью инструкции return в любом месте процедуры.

Каждый скрипт обязан содержать процедуру main, так как выполнение скрипта начинается с неё, а возврат из неё означает окончание работы интерпретатора.

Вложенных вызовов также ограниченное количество.

4-3) Ввод и вывод.

В sli есть стандарт для вывода в консоль (без переноса на сл. строку и с переносом):

out выражение
outln выражение

И для ввода из консоли (без переноса на сл. строку и с переносом):

get имя_переменной
getln имя_переменной

4-4) Управляющие конструкции.

Условие пишется так (ни логических операторов, ни ветвлений не предусмотрено, так как мне было лень и дзен-буддизм воспрещает)

if выражение_1 оператор выражение_2 then

тело_условия

end if

Бесконечный и безусловный цикл (по тем же причинам):

loop

тело_цикла

end loop

Цикл можно прервать инструкцией break и прокрутить на следующую итерацию инструкцией continue.

Вложенных циклов также ограниченное количество.

5) Пример.

Как выглядит helloworld (examples\hello.l):

def proc main

	outln "Hello, world!"

end def

Вычисление факториала (examples\factorial.l):

def proc main

	def var n 
	def var i
        def var f = 0
        
	out "n = "
	getln n          
	        
	i = "%$n - 1" 
	 
	f = $n
	
	loop
	
		f = "%$f * $i"
		i = "%$i - 1"
		
		if $i = 0 then
		
			break
			
		end if
	        		
	end loop
	
	out "f = "
	outln $f   

end def