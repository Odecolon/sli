sli v0.4 - simple L interpreter by Odecolon

1. О программе

sli - интерпретатор простого скриптового языка L, созданного мной для встраивания в другие мои проекты. Поэтому интерпретатор помещён в отдельный модуль, написанный на FreePascal, а sli - это маленькая консоль вокруг его (как ни странно, написана тоже на FreePascal).

Сам язык описан в третьем разделе этого readme. Кроме того, в папке examples этого репозитория лежат примеры скриптов. 

2. Что нового?

В версии 0.4 был доработан парсер математических выражений, убран оператор препроцессора % - теперь математические выражения определяются автоматически. Добавлена возможность конкатенации строк, добавлен оператор отмены обработки ~. Улучшен интерфейс интепретатора. Также убрана возможность генерации логов. Несколько доработана система ошибок, но до сих пор есть проблемы с определением некоторых ошибок.

3. Запуск и возможности

Чтобы выполнить скрипт из файла:

	sli файл_скрипта 

В консоли можно использовать команду 'h', чтобы получить список доступных команд.

Собиралось и тестировалось в lazarus v1.8.0 c fpc 3.0.4 win32 под Win7.

4. О языке L 

L - скриптовый язык, предназначенный для встраивания куда-нибудь. Простой, примитивный, громоздкий и неочевидный. Процедурный, но не функциональный. Имееет только глобальные переменные и только целочисленную арифметику. Версия языка - 0.4.

Примечание - если вы совершили ошибку или не использовали приведённые рекомендации, то интерпретатор может или вообще вылететь, или выдать совершенно непредсказуемый результат.

Программа состоит из набора объявлений процедур и переменных. Переменные только глобальные, требуют объявления для их использования (объявляются на том же уровне, что и процедуры, то есть, вне процедур) и разыменования для использования их значений. Каждая самостоятельная программа содержит процедуру main, возврат из которой означает завершение работы программы. 

Программа состоит из набора команд. Программа выполняется построчно. 

Порядок обработки строки таков:

1) Считывание строки из файла.
2) Удаление символов, не входящих в ASCII, а так же управляющих символов.
3) Разбитие строки на лексемы по пробелам (набор символов, заключённый в кавычки ("), считывается как лексема, даже если содержит пробелы).
4) Получение данных разыменованием переменных (см. ниже).
5) Выполение действий над строками (см. ниже).
6) Выполение математических вычислений.
7) Исполнение строки.

Алфавит языка: 

Используются символы латинского алфавита в верхнем и нижнем регистре, цифры от 0 до 9, символы $, @, +, -, *, /, 

", !, =, (, ), <, >. Регистр ключевых слов и переменных не учитывается.

Список ключевых слов:

def, proc, var, if, loop, end, out, ln, get, break, continue, return, do

Список команд обработки:

1) $ - разыменование переменной, т. е. при обработке строки перед выполением $имя_переменной заменяется на её значение.
2) @ - конкатенация строк, т. е. строка_1 @ строка_2 заменяется на строку, являющуюся "склейкой" исходных двух.

Список поддерживаемых математических операций:

1) + - сложение
2) - вычитание
3) * - умножение
4) / - целочисленное деление
5) == - равно
6) > - больше
7) < - меньше
8) <= - меньше или равно
9) >= - больше или равно
10) != - не равно
11) ! - не
12) & - и
13) | - или

В качестве логических значений используются единица - истина и ноль - ложь.

Список команд:

1) def - объявление объекта (процедуры/переменной). 

Структура для переменной: def var [имя_переменной] или def var [имя_переменной] = [значение_переменной]
Структура для процедуры:

def proc [имя_процедуры]

	[тело_процедуры]

end def

2) = - присвоение значения переменной.

Структура: [имя_переменной] = [значение]

3) loop - объявление безусловного цикла.

Структура:

loop

	[тело_цикла]

end loop

4) if - условная конструкция.

Структура: if [логическое_выражение] then [команда] или

if [логическое_выражение] then 

	[последовательность_команд]

end if 

5) break - инструкция прерывания цикла.

Структура: break

6) continue - инструкция перехода цикла на следующую операцию.

Структура: continue

7) return - инструкция возврата из исполняемой процедуры.

Структура: return

8) out, outln - страндартный вывод.

Структура: out [значение] ln - с переходом на новую строку или: out [значение] - без перехода. 

9) get - страндартный ввод в переменную.

Структура: get [переменная] (с переходом на новую строку). 

10) do - вызов процедуры.

Структура: do [имя_процедуры]

5. Примеры кода

Стандартный hello-world (examples\hello.l):

def proc main

	out "Hello, world!" ln

end def

Вычисление факториала (examples\factorial.l):

def var n 
def var f

def proc main

	out "n = "
	get n
	
	do factorial

	out "f = "
	out $f ln
	
end def

def proc factorial

	f = 1

	loop
		
		if $n == 0 then break
		
		f = $f * $n
		n = $n - 1
		
	end loop

end def